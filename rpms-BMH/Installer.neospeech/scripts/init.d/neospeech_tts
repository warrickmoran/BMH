#!/bin/bash
#
# neospeech_tts  This shell script takes care of starting and stopping
#                the NeoSpeech TTS Server.
#
# chkconfig: 235 99 10
# description: BMH NeoSpeech TTS 
# processname: ttssrv
##############################################################################
# BMH NeoSpeech TTS Service Script.
#
#     SOFTWARE HISTORY
#    
#    Date            Ticket#       Engineer       Description
#    ------------    ----------    -----------    --------------------------
#    10/15/15        4976          bkowal         Initial Creation.
#    01/06/16        5210          bkowal         Verify that the TTS-provided
#                                                 stop script finishes.
##############################################################################

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ ${NETWORKING} = "no" ] && exit 0

RETVAL=0
START_SCRIPT="ttssrv_start"
STOP_SCRIPT="ttssrv_stop"
PROG="NeoSpeech TTS"
NEOSPEECH_HOME=/awips2/bmh/neospeech
NEOSPEECH_BIN=${NEOSPEECH_HOME}/bin
NEOSPEECH_LOGS=${NEOSPEECH_HOME}/log


TODAY=`/bin/date +%Y%m%d`
NEOSPEECH_LOG=${NEOSPEECH_LOGS}/tts-start-${TODAY}.log

getTtsPid() {
	neospeech_pid=`pgrep -f "ttssrv"`
	neospeech_pid_found=$?
}

getTtsStopPid() {
	neospeech_stop_pid=`pgrep -f "${STOP_SCRIPT}"`
	neospeech_stop_pid_found=$?
}

handleStatus() {
	local status_target=$1
	local status_code=$2
	local status_pid=$3

	case ${status_code} in
		0)
			echo "${status_target} (pid ${status_pid}) is running ..."
			;;
		1)
			echo "${status_target} is not running."
			;;
		4)
			echo "${status_target} status unknown due to insufficient privileges."
			;;
		*)
			echo "${status_target} status unknown!"
			;;
	esac
}

start() {
	getTtsPid
	if [ ${neospeech_pid_found} -eq 0 ]; then
		echo -ne "${PROG} (pid ${neospeech_pid}) is already running."
		failure
		echo
		return
	fi
	
	# Start NeoSpeech TTS
	local now=`date`
	echo "Starting ${PROG} @ ${now} ..." >> ${NEOSPEECH_LOG}
	echo -ne "Starting ${PROG} ..."
	/bin/bash ${NEOSPEECH_BIN}/${START_SCRIPT} >> ${NEOSPEECH_LOG} 2>&1
	if [ $? -ne 0 ]; then
		failure
		echo
		echo "Failed to start ${PROG}!" >> ${NEOSPEECH_LOG}
		return
	fi
	
	local attempt_max=10
	local attempt_count=0
	# Verify that NeoSpeech TTS has started
	while [ ${neospeech_pid_found} -ne 0 ]; do
		let attempt_count+=1
		if [ ${attempt_count} -eq ${attempt_max} ]; then
			failure
			echo
			# the assumption is that there will be stacktraces in the log
			# at this point to differentiate between this failure and
			# the previous potential failure.
			echo "Failed to start ${PROG}!" >> ${NEOSPEECH_LOG}
			return
		fi
		sleep 2
		getTtsPid
	done
	
	success
	echo
}

stop() {
	# get the pids
	getTtsPid
	if [ ${neospeech_pid_found} -ne 0 ]; then
		echo -ne "${PROG} is not running."
		failure
		echo
		return
	fi
	
	local attempt_max=10
	local force_kill_neospeech=0
	local force_kill_neospeech_stop=0
	
	local now=`date`
	echo "Stopping ${PROG} @ ${now} ..." >> ${NEOSPEECH_LOG}
	echo -ne "Stopping ${PROG} ..."
	# Run the tts stop script in the background so that we will be able to verify
	# its successful execution.
	/bin/bash ${NEOSPEECH_BIN}/${STOP_SCRIPT} >> ${NEOSPEECH_LOG} 2>&1 &
	
	# verify that the NeoSpeech stop script has successfully finished
	getTtsStopPid
	local attempt_count=0
	while [ ${neospeech_stop_pid_found} -eq 0 ]; do
		let attempt_count+=1
		if [ ${attempt_count} -eq ${attempt_max} -a ${force_kill_neospeech_stop} -eq 0 ]; then
			force_kill_neospeech_stop=1
			attempt_count=0
			echo "Killing ${STOP_SCRIPT} (pid ${neospeech_stop_pid})" >> ${NEOSPEECH_LOG}
			kill -9 ${neospeech_stop_pid} > /dev/null 2>&1
		elif [ ${attempt_count} -eq ${attempt_max} -a ${force_kill_neospeech_stop} -eq 1 ]; then
			failure
			echo
			echo "Failed to stop ${STOP_SCRIPT} (pid ${neospeech_stop_pid})" | tee -a ${NEOSPEECH_LOG}
			echo "Failed to stop ${PROG} (pid ${neospeech_pid})" | tee -a ${NEOSPEECH_LOG}
			return
		fi
		sleep 1
		getTtsStopPid
	done
	
	# wait for neospeech to stop
	attempt_count=0
	if [ ${force_kill_neospeech_stop} -eq 1 ]; then
	   # just skip to the kill NeoSpeech phase because the NeoSpeech stop script
	   # failed to finish.
	   attempt_count=9
	   # refresh information about the running NeoSpeech process.
	   getTtsPid
	fi
	while [ ${neospeech_pid_found} -eq 0 ]; do
		let attempt_count+=1
		if [ ${attempt_count} -eq ${attempt_max} -a ${force_kill_neospeech} -eq 0 ]; then
			force_kill_neospeech=1
			attempt_count=0
			echo "Killing ${PROG} (pid ${neospeech_pid})" >> ${NEOSPEECH_LOG}
			kill -9 ${neospeech_pid} > /dev/null 2>&1
		elif [ ${attempt_count} -eq ${attempt_max} -a ${force_kill_neospeech} -eq 1 ]; then
			failure
			echo
			echo "Failed to stop ${PROG} (pid ${neospeech_pid})" | tee -a ${NEOSPEECH_LOG}
			return
		fi
		sleep 2
		getTtsPid
	done
	
	success
	echo

	return
}

status() {
	getTtsPid
	
	handleStatus "${PROG}" ${neospeech_pid_found} ${neospeech_pid}
}

usage() {
	echo "Usage: $0 {start|stop|status|restart}"
}

func=$1

case $func in
	start)
		${func}
		;;
	stop)
		${func}
		;;
	status)
		${func}
		;;
	restart)
		stop
		sleep 1
		start
		;;
	*)
		usage
		;;
	esac
